: basic
:
$* <<EOI >>EOO
{
  "string":  "str",
  "number":  123,
  "boolean": true,
  "null":    null,
  "array":   ["str", 123, false, null],
  "subobj":  {"foo": "bar"}
}
EOI
  1: {
  2:   string
  2:   "str"
  3:   number
  3:   123
  4:   boolean
  4:   true
  5:   null
  5:   NULL
  6:   array
  6:   [
  6:     "str"
  6:     123
  6:     false
  6:     NULL
  6:   ]
  7:   subobj
  7:   {
  7:     foo
  7:     "bar"
  7:   }
  8: }
EOO

: empty
:
$* 2>>EOE != 0
<stdin>:1:0: error: unexpected end of text
EOE

: fail-exception
:
$* --fail-exc <'{' >'  1: {' 2>>EOE != 0
error: unable to read from stdin
EOE

: fail-bit
:
$* --fail-bit <'{' >'  1: {' 2>>EOE != 0
<stdin>:0:0: error: unable to read text
EOE

: value-sint
:
{
  : max
  :
  $* i <'2147483647' >'  1: 2147483647'

  : min
  :
  $* i <'-2147483648' >'  1: -2147483648'

  : fail-min
  :
  $* i <'-2147483649' 2>>EOE != 0
  <stdin>:1:0: error: invalid signed integer value: '-2147483649'
  EOE

  : fail-max
  :
  $* i <'2147483648' 2>>EOE != 0
  <stdin>:1:0: error: invalid signed integer value: '2147483648'
  EOE
}

: value-uint
:
{
  : max
  :
  $* u <'4294967295' >'  1: 4294967295'

  : fail-max
  :
  $* u <'4294967296' 2>>EOE != 0
  <stdin>:1:0: error: invalid unsigned integer value: '4294967296'
  EOE
}

# Testing floating point values is a pain. So we only check the success cases
# trusting the strto*() functions to detect range issues as expected.
#
: value-float
:
$* f <'0.123' >~'/  1: 0.123[0-9]*/'

: value-double
:
$* d <'0.1234' >~'/  1: 0.1234[0-9]*/'

: value-long-double
:
$* l <'0.12345' >~'/  1: 0.12345[0-9]*/'

# Test a bunch of corner cases.
#
: leading-zero
:
$* <'01' >'  1: 0' 2>>EOE != 0
<stdin>:1:0: error: expected end of text instead of byte '1'
EOE

: wrong-letter
:
$* <'trux' 2>>EOE != 0
<stdin>:1:0: error: expected 'e' instead of byte 'x'
EOE
